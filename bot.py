from flask import Flask
from threading import Thread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

app = Flask('')

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞
TOKEN = "7713211792:AAHz4aXX6vJBUB04c6TDSfTAxAZwmhdAe8c"
GROUP_ID = -1002388896615

# –í–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≤—Ç—Ä–∞–∫–æ–≤
BREAKFASTS = [
    "–û–≤—Å—è–Ω–æ—á–∫–∞ ü•£",
    "–í–∫—É—Å–Ω–µ–π—à–∏–π –æ–º–ª–µ—Ç üç≥",
    "–Ø–∏—á–Ω–∏—Ü–∞ —Å –±–µ–∫–æ–Ω–æ–º ü•ì",
    "–ë—É—Ç–µ—Ä–±—Ä–æ–¥—ã ü•™",
    "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚úçÔ∏è"
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    keyboard = [
        [InlineKeyboardButton(option, callback_data=option)] for option in BREAKFASTS
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–°–æ–ª–Ω—ã—à–∫–æ –º–æ—ë, –≤—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫:", reply_markup=reply_markup
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    selected_option = query.data

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π
    context.user_data['selected_breakfast'] = selected_option
    await query.edit_message_text(
        f"–¢—ã –≤—ã–±—Ä–∞–ª–∞: {selected_option}. –ù–∞–ø–∏—à–∏, —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ –∑–∞–≤—Ç—Ä–∞–∫—É:"
    )
    context.user_data['waiting_for_addition'] = True

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    if context.user_data.get('waiting_for_addition'):
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        addition = update.message.text
        selected_breakfast = context.user_data.get('selected_breakfast', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        await context.bot.send_message(
            chat_id=GROUP_ID,
            text=f"üåü –ó–∞–≤—Ç—Ä–∞–∫ –≤—ã–±—Ä–∞–Ω: {selected_breakfast}\n–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {addition}"
        )

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            f"–°–ø–∞—Å–∏–±–æ! –¢—ã –≤—ã–±—Ä–∞–ª–∞: {selected_breakfast}.\n–° –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º: {addition}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏—è
        await update.message.reply_text(
            "–Ø –ª—é–±–ª—é —Ç–µ–±—è, –∫–æ—Ç—ë–Ω–æ—á–µ–∫ ‚ù§Ô∏è"
        )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data['waiting_for_addition'] = False
        context.user_data['selected_breakfast'] = None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
    keep_alive()  # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –¥–ª—è "Keep Alive"
    application.run_polling()

if __name__ == "__main__":
    main()
